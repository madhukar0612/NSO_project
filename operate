#!/bin/bash


rc_file=$1
tag_name=$2
publickey=$3

# Define variables
def_network_name="$2_network"
def_subnet_name="$2_subnet"
def_keypair_name="$2_key"
def_router_name="$2_router"
def_security_group_name="$2_security_group"
haproxy_server="$2_HAproxy"
haproxy_server2="$2_HAproxy2"
bastion_server="$2_bastion"
dev_server="$2_dev"
sshconfig="config"
knownhosts="known_hosts"
hostsfile="hosts"

run_status=0 ##ansible run status
echo "Running Operation mode for tag: $tag_name using $rc_file for credentials"
source $rc_file

generate_config(){
    bastionfip=$(openstack server list --name $bastion_server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2')
    # haproxyfip=$(openstack server list --name $haproxy_server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')
    haproxyfip=$(openstack server show $haproxy_server -c addresses | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')
    haproxyfip2=$(openstack server list --name $haproxy_server2 -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')

    echo "$(date) Generating config file"
    echo "Host $bastion_server" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $bastionfip" >> $sshconfig
    echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no" >> $sshconfig

    echo " " >> $sshconfig
    echo "Host $haproxy_server" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $haproxyfip" >> $sshconfig
    echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no ">> $sshconfig
    echo "   ProxyJump $bastion_server" >> $sshconfig

    echo " " >> $sshconfig
    echo "Host $haproxy_server2" >> $sshconfig
    echo "   User ubuntu" >> $sshconfig
    echo "   HostName $haproxyfip2" >> $sshconfig
    echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
    echo "   StrictHostKeyChecking no" >> $sshconfig
    echo "   PasswordAuthentication no ">> $sshconfig
    echo "   ProxyJump $bastion_server" >> $sshconfig

    # generate hosts file
    echo "[bastion]" >> $hostsfile
    echo "$bastion_server" >> $hostsfile
    echo " " >> $hostsfile
    echo "[HAproxy]" >> $hostsfile
    echo "$haproxy_server" >> $hostsfile
    echo "$haproxy_server2" >> $hostsfile

    echo " " >> $hostsfile
    echo "[primary_proxy]" >> $hostsfile
    echo "$haproxy_server" >> $hostsfile
    echo " " >> $hostsfile
    echo "[backup_proxy]" >> $hostsfile
    echo "$haproxy_server2" >> $hostsfile

    echo " " >> $hostsfile
    echo "[webservers]" >> $hostsfile

    # Get the list of active servers
    active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep -oP "${tag_name}"'_dev([1-9]+)')
    echo "$active_Servers"
    # Loop through each active server and extract its IP address
    for server in $active_servers; do
            ip_address=$(openstack server list --name $server -c Networks -f value | grep -Po  '\d+\.\d+\.\d+\.\d+')
            echo " " >> $sshconfig
            echo "Host $server" >> $sshconfig
            echo "   User ubuntu" >> $sshconfig
            echo "   HostName $ip_address" >> $sshconfig
            echo "   IdentityFile ~/.ssh/id_rsa" >> $sshconfig
            echo "   UserKnownHostsFile=~/dev/null" >> $sshconfig
            echo "   StrictHostKeyChecking no" >> $sshconfig
            echo "   PasswordAuthentication no" >> $sshconfig
            echo "   ProxyJump $bastion_server" >> $sshconfig

            echo "$server" >> $hostsfile
    done

    echo " " >> $hostsfile
    echo "[all:vars]" >> $hostsfile
    echo "ansible_user=ubuntu" >> $hostsfile
    echo "ansible_ssh_private_key_file=~/.ssh/id_rsa" >> $hostsfile
    echo "ansible_ssh_common_args=' -F $sshconfig '" >> $hostsfile
}


delete_config_and_hostsfile(){
    if [[ -f "$hostsfile" ]] ; then
    rm "$hostsfile"
    fi

    if [[ -f "$sshconfig" ]] ; then
        rm "$sshconfig"
    fi

}
while true
do
    reqr_no_of_dev_serv=$(cat servers.conf)
    echo "$(date) Reading node count from  servers.conf, we need $reqr_no_of_dev_serv dev nodes"

    exist_serv_previously=$(openstack server list --status ACTIVE --column Name -f value)
    dev_serv_count=$(grep -c $dev_server <<< $exist_serv_previously)
    echo "$(date) Have $dev_serv_count dev servers"

    total_no_of_serv=$(openstack server list --column Name -f value)
    total_count=$(grep -c $dev_server <<< $total_no_of_serv)

    if (($reqr_no_of_dev_serv > $dev_serv_count)); then
        no_of_serv_toadd=$(($reqr_no_of_dev_serv - $dev_serv_count))
        echo "$(date) Creating $no_of_serv_toadd more dev servers ..."
        sequence=$(( $total_count+1 ))
        devserver_name=${dev_server}${sequence}

        run_status=1 ## ansible run status
        while [ $no_of_serv_toadd -gt 0 ]
        do
            new_server_creation=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64"  "$devserver_name" --key-name "$def_keypair_name" --flavor "1C-2GB-50GB" --network "$def_network_name" --security-group "$def_security_group_name")
            echo "$(date) Created $devserver_name server"
            ((no_of_serv_toadd--))
            sequence=$(( $sequence+1 ))
            active=false
            while [ "$active" = false ]; do
                server_status=$(openstack server show "$devserver_name" -f value -c status)
                if [ "$server_status" == "ACTIVE" ]; then
                    active=true
                fi
            done
            devserver_name=${dev_server}${sequence}

        done

    elif (( $reqr_no_of_dev_serv < $dev_serv_count )); then
        no_of_serv_to_remove=$(($dev_serv_count - $reqr_no_of_dev_serv))
        sequence1=0
        while [[ $sequence1 -lt $no_of_serv_toremove ]]; do
            server_to_delete=$(openstack server list --status ACTIVE -f value -c Name | grep -m1 -oP "${tag_name}"'_dev([1-9]+)')
            deleted_server=$(openstack server delete "$server_to_delete" --wait)
            echo "$(date) Deleted server name $server_to_delete "
            ((sequence1++))
        done
    else
        echo "Required number of dev servers($reqr_no_of_dev_serv) already exist."
    fi

    current_servers=$(openstack server list --status ACTIVE --column Name -f value)
    new_count=$(grep -c $dev_server <<< $current_servers)

    if [ "$reqr_no_of_dev_serv" == "$new_count" ]; then
        delete_config_and_hostsfile
        generate_config

        if [ "$run_status" -eq 1 ]; then
            echo "$(date) Running ansible playbook"
            ansible-playbook -i "$hostsfile" site.yaml
            run_status=0
        fi

    fi

    echo "Entering into sleep mode"
    sleep 20
done
